[Rank 1] 2025-07-27 20:13:31,423 - INFO - ✅ Universal denoising model loaded successfully
[Rank 1] 2025-07-27 20:13:31,423 - INFO -   ✅ Supports: EVA denoising (4096D) & CLIP denoising (1024D)
[Rank 1] 2025-07-27 20:13:31,427 - INFO - ✅ Universal spherical flow matching loss loaded successfully
[Rank 1] 2025-07-27 20:13:31,427 - INFO -   ✅ Supports: Universal spherical flow for any embedding dimension
[Rank 1] 2025-07-27 20:13:31,427 - ERROR - ❌ Universal trainer import failed: No module named 'src.modules.trainers.blip3o_eva_trainer'
[Rank 1] 2025-07-27 20:13:31,432 - INFO - ✅ Universal denoising dataset loaded successfully
[Rank 1] 2025-07-27 20:13:31,432 - INFO -   ✅ Supports: Flexible data loading for both EVA & CLIP tasks
[Rank 1] 2025-07-27 20:13:31,436 - INFO - ✅ Universal configuration loaded successfully
[Rank 1] 2025-07-27 20:13:31,436 - INFO -   ✅ Supports: Task-adaptive configs for EVA & CLIP denoising
[Rank 1] 2025-07-27 20:13:31,436 - WARNING - ⚠️ Missing original components: ['model', 'loss', 'trainer', 'dataset', 'config']
[Rank 1] 2025-07-27 20:13:31,436 - ERROR - ❌ Missing universal components: ['universal_trainer']
[Rank 1] 2025-07-27 20:13:31,436 - WARNING - ⚠️ Missing backward compatibility components: ['spherical_trainer']
[Rank 1] 2025-07-27 20:13:31,436 - ERROR - ❌ UNIVERSAL DENOISING components missing!
[Rank 1] 2025-07-27 20:13:31,436 - ERROR -   Please ensure the following files are present:
[Rank 1] 2025-07-27 20:13:31,436 - ERROR -     - src/modules/models/blip3o_eva_dit.py
[Rank 1] 2025-07-27 20:13:31,436 - ERROR -     - src/modules/losses/blip3o_eva_loss.py
[Rank 1] 2025-07-27 20:13:31,436 - ERROR -     - src/modules/trainers/blip3o_eva_trainer.py
[Rank 1] 2025-07-27 20:13:31,436 - ERROR -     - src/modules/datasets/blip3o_eva_dataset.py
[Rank 1] 2025-07-27 20:13:31,437 - ERROR -     - src/modules/config/blip3o_config.py
[Rank 1] 2025-07-27 20:13:31,437 - WARNING - ⚠️ Some original BLIP3-o components failed to load. Check individual imports.
[Rank 1] 2025-07-27 20:13:31,437 - ERROR - ❌ CRITICAL: No denoising components available!
[Rank 1] 2025-07-27 20:13:33,259 - INFO - Universal DiT model initialized with 207,351,808 parameters
[Rank 1] 2025-07-27 20:13:33,259 - INFO -   Task: CLIP-ViT Denoising with EVA Conditioning
[Rank 1] 2025-07-27 20:13:33,259 - INFO -   Input: Noisy CLIP [B, N, 1024]
[Rank 1] 2025-07-27 20:13:33,259 - INFO -   Conditioning: Clean EVA [B, N, 4096]
[Rank 1] 2025-07-27 20:13:33,259 - INFO -   Output: Clean CLIP [B, N, 1024]
[Rank 1] 2025-07-27 20:13:33,259 - INFO -   Prediction type: velocity
[Rank 1] 2025-07-27 20:13:34,546 - ERROR - Training failed: [1] is setting up NCCL communicator and retrieving ncclUniqueId from [0] via c10d key-value store by key '0', but store->get('0') got error: failed to recv, got 0 bytes
Exception raised from recvBytes at /pytorch/torch/csrc/distributed/c10d/Utils.hpp:678 (most recent call first):
C++ CapturedTraceback:
#4 std::_Function_handler<std::shared_ptr<c10::LazyValue<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const> (), c10::SetStackTraceFetcher(std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ()>)::{lambda()#1}>::_M_invoke(std::_Any_data const&) from Logging.cpp:0
#5 c10::Error::Error(c10::SourceLocation, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) from ??:0
#6 c10::DistNetworkError::Error(c10::SourceLocation, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) from :0
#7 void c10d::tcputil::recvBytes<c10d::detail::WaitResponseType>(int, c10d::detail::WaitResponseType*, unsigned long) from :0
#8 c10d::TCPStore::doWait(c10::ArrayRef<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::chrono::duration<long, std::ratio<1l, 1000l> >) from ??:0
#9 c10d::TCPStore::doGet(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) from ??:0
#10 c10d::TCPStore::get(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) from ??:0
#11 c10d::PrefixStore::get(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) from ??:0
#12 c10d::PrefixStore::get(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) from ??:0
#13 c10d::PrefixStore::get(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) from ??:0
#14 c10d::ProcessGroupNCCL::broadcastUniqueNCCLID(ncclUniqueId*, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) from ??:0
#15 c10d::ProcessGroupNCCL::initNCCLComm(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, c10::Device&, c10d::OpType, int, bool) from ??:0
#16 c10d::ProcessGroupNCCL::allgather(std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > >&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, c10d::AllgatherOptions const&) from ??:0
#17 c10d::ops::(anonymous namespace)::allgather_CUDA(std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > > const&, c10::ArrayRef<at::Tensor>, c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, long) from Ops.cpp:0
#18 c10::impl::make_boxed_from_unboxed_functor<c10::impl::detail::WrapFunctionIntoRuntimeFunctor_<std::tuple<std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > >, c10::intrusive_ptr<c10d::Work, c10::detail::intrusive_target_default_null_type<c10d::Work> > > (*)(std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > > const&, c10::ArrayRef<at::Tensor>, c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, long), std::tuple<std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > >, c10::intrusive_ptr<c10d::Work, c10::detail::intrusive_target_default_null_type<c10d::Work> > >, c10::guts::typelist::typelist<std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > > const&, c10::ArrayRef<at::Tensor>, c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, long> >, false>::call(c10::OperatorKernel*, c10::OperatorHandle const&, c10::DispatchKeySet, std::vector<c10::IValue, std::allocator<c10::IValue> >*) from :0
#19 torch::autograd::basicAutogradNotImplementedFallbackImpl(c10::OperatorHandle const&, c10::DispatchKeySet, std::vector<c10::IValue, std::allocator<c10::IValue> >*) from autograd_not_implemented_fallback.cpp:0
#20 c10::impl::BoxedKernelWrapper<std::tuple<std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > >, c10::intrusive_ptr<c10d::Work, c10::detail::intrusive_target_default_null_type<c10d::Work> > > (std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > > const&, c10::ArrayRef<at::Tensor>, c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, long), void>::call(c10::BoxedKernel const&, c10::OperatorHandle const&, c10::DispatchKeySet, std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > > const&, c10::ArrayRef<at::Tensor>, c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, long) from :0
#21 c10d::ProcessGroup::allgather(std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > >&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, c10d::AllgatherOptions const&) from :0
#22 c10d::verify_params_across_processes(c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, std::optional<std::weak_ptr<c10d::Logger> > const&) from ??:0
#23 std::enable_if<std::is_void<void>::value, pybind11::detail::void_type>::type pybind11::detail::argument_loader<c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, std::optional<std::shared_ptr<c10d::Logger> > const&>::call<void, pybind11::gil_scoped_release, torch::distributed::c10d::(anonymous namespace)::c10d_init(_object*, _object*)::{lambda(c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, std::optional<std::shared_ptr<c10d::Logger> > const&)#111}&>(torch::distributed::c10d::(anonymous namespace)::c10d_init(_object*, _object*)::{lambda(c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, std::optional<std::shared_ptr<c10d::Logger> > const&)#111}&) && [clone .isra.0] from init.cpp:0
#24 pybind11::cpp_function::initialize<torch::distributed::c10d::(anonymous namespace)::c10d_init(_object*, _object*)::{lambda(c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, std::optional<std::shared_ptr<c10d::Logger> > const&)#111}, void, c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, std::optional<std::shared_ptr<c10d::Logger> > const&, pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg, pybind11::sibling, pybind11::arg_v, pybind11::call_guard<pybind11::gil_scoped_release> >(torch::distributed::c10d::(anonymous namespace)::c10d_init(_object*, _object*)::{lambda(c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, std::optional<std::shared_ptr<c10d::Logger> > const&)#111}&&, void (*)(c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, std::optional<std::shared_ptr<c10d::Logger> > const&), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, pybind11::arg const&, pybind11::sibling const&, pybind11::arg_v const&, pybind11::call_guard<pybind11::gil_scoped_release> const&)::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call) from init.cpp:0
#25 pybind11::cpp_function::dispatcher(_object*, _object*, _object*) from :0
#26 cfunction_call from /usr/local/src/conda/python-3.11.13/Objects/methodobject.c:542
#27 _PyObject_MakeTpCall from /usr/local/src/conda/python-3.11.13/Objects/call.c:214
#28 _PyEval_EvalFrameDefault from /usr/local/src/conda/python-3.11.13/Python/ceval.c:4769
#29 _PyEval_EvalFrame from /usr/local/src/conda/python-3.11.13/Include/internal/pycore_ceval.h:73
#30 _PyObject_FastCallDictTstate from /usr/local/src/conda/python-3.11.13/Objects/call.c:152
#31 type_call from /usr/local/src/conda/python-3.11.13/Objects/typeobject.c:1103
#32 _PyEval_EvalFrameDefault from /usr/local/src/conda/python-3.11.13/Python/ceval.c:4769
#33 _PyEval_EvalFrame from /usr/local/src/conda/python-3.11.13/Include/internal/pycore_ceval.h:73
#34 PyEval_EvalCode from /usr/local/src/conda/python-3.11.13/Python/ceval.c:1148
#35 run_eval_code_obj from /usr/local/src/conda/python-3.11.13/Python/pythonrun.c:1741
#36 run_mod from /usr/local/src/conda/python-3.11.13/Python/pythonrun.c:1762
#37 pyrun_file from /usr/local/src/conda/python-3.11.13/Python/pythonrun.c:1657
#38 _PyRun_SimpleFileObject from /usr/local/src/conda/python-3.11.13/Python/pythonrun.c:440
#39 _PyRun_AnyFileObject from /usr/local/src/conda/python-3.11.13/Python/pythonrun.c:79
#40 pymain_run_file_obj from /usr/local/src/conda/python-3.11.13/Modules/main.c:360
#41 Py_BytesMain from /usr/local/src/conda/python-3.11.13/Modules/main.c:738
#42 __libc_start_call_main from ??:0
#43 __libc_start_main_alias_2 from :0
#44 _start from ??:0
. This may indicate a possible application crash on rank 0 or a network set up issue.
Exception raised from broadcastUniqueNCCLID at /pytorch/torch/csrc/distributed/c10d/ProcessGroupNCCL.cpp:2534 (most recent call first):
C++ CapturedTraceback:
#4 std::_Function_handler<std::shared_ptr<c10::LazyValue<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const> (), c10::SetStackTraceFetcher(std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ()>)::{lambda()#1}>::_M_invoke(std::_Any_data const&) from Logging.cpp:0
#5 c10::Error::Error(c10::SourceLocation, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) from ??:0
#6 c10::DistBackendError::Error(c10::SourceLocation, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) from :0
#7 c10d::ProcessGroupNCCL::broadcastUniqueNCCLID(ncclUniqueId*, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) [clone .cold] from ProcessGroupNCCL.cpp:0
#8 c10d::ProcessGroupNCCL::initNCCLComm(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, c10::Device&, c10d::OpType, int, bool) from ??:0
#9 c10d::ProcessGroupNCCL::allgather(std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > >&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, c10d::AllgatherOptions const&) from ??:0
#10 c10d::ops::(anonymous namespace)::allgather_CUDA(std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > > const&, c10::ArrayRef<at::Tensor>, c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, long) from Ops.cpp:0
#11 c10::impl::make_boxed_from_unboxed_functor<c10::impl::detail::WrapFunctionIntoRuntimeFunctor_<std::tuple<std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > >, c10::intrusive_ptr<c10d::Work, c10::detail::intrusive_target_default_null_type<c10d::Work> > > (*)(std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > > const&, c10::ArrayRef<at::Tensor>, c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, long), std::tuple<std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > >, c10::intrusive_ptr<c10d::Work, c10::detail::intrusive_target_default_null_type<c10d::Work> > >, c10::guts::typelist::typelist<std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > > const&, c10::ArrayRef<at::Tensor>, c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, long> >, false>::call(c10::OperatorKernel*, c10::OperatorHandle const&, c10::DispatchKeySet, std::vector<c10::IValue, std::allocator<c10::IValue> >*) from :0
#12 torch::autograd::basicAutogradNotImplementedFallbackImpl(c10::OperatorHandle const&, c10::DispatchKeySet, std::vector<c10::IValue, std::allocator<c10::IValue> >*) from autograd_not_implemented_fallback.cpp:0
#13 c10::impl::BoxedKernelWrapper<std::tuple<std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > >, c10::intrusive_ptr<c10d::Work, c10::detail::intrusive_target_default_null_type<c10d::Work> > > (std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > > const&, c10::ArrayRef<at::Tensor>, c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, long), void>::call(c10::BoxedKernel const&, c10::OperatorHandle const&, c10::DispatchKeySet, std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > > const&, c10::ArrayRef<at::Tensor>, c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, long) from :0
#14 c10d::ProcessGroup::allgather(std::vector<std::vector<at::Tensor, std::allocator<at::Tensor> >, std::allocator<std::vector<at::Tensor, std::allocator<at::Tensor> > > >&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, c10d::AllgatherOptions const&) from :0
#15 c10d::verify_params_across_processes(c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, std::optional<std::weak_ptr<c10d::Logger> > const&) from ??:0
#16 std::enable_if<std::is_void<void>::value, pybind11::detail::void_type>::type pybind11::detail::argument_loader<c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, std::optional<std::shared_ptr<c10d::Logger> > const&>::call<void, pybind11::gil_scoped_release, torch::distributed::c10d::(anonymous namespace)::c10d_init(_object*, _object*)::{lambda(c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, std::optional<std::shared_ptr<c10d::Logger> > const&)#111}&>(torch::distributed::c10d::(anonymous namespace)::c10d_init(_object*, _object*)::{lambda(c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, std::optional<std::shared_ptr<c10d::Logger> > const&)#111}&) && [clone .isra.0] from init.cpp:0
#17 pybind11::cpp_function::initialize<torch::distributed::c10d::(anonymous namespace)::c10d_init(_object*, _object*)::{lambda(c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, std::optional<std::shared_ptr<c10d::Logger> > const&)#111}, void, c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, std::optional<std::shared_ptr<c10d::Logger> > const&, pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg, pybind11::sibling, pybind11::arg_v, pybind11::call_guard<pybind11::gil_scoped_release> >(torch::distributed::c10d::(anonymous namespace)::c10d_init(_object*, _object*)::{lambda(c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, std::optional<std::shared_ptr<c10d::Logger> > const&)#111}&&, void (*)(c10::intrusive_ptr<c10d::ProcessGroup, c10::detail::intrusive_target_default_null_type<c10d::ProcessGroup> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> > const&, std::optional<std::shared_ptr<c10d::Logger> > const&), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, pybind11::arg const&, pybind11::sibling const&, pybind11::arg_v const&, pybind11::call_guard<pybind11::gil_scoped_release> const&)::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call) from init.cpp:0
#18 pybind11::cpp_function::dispatcher(_object*, _object*, _object*) from :0
#19 cfunction_call from /usr/local/src/conda/python-3.11.13/Objects/methodobject.c:542
#20 _PyObject_MakeTpCall from /usr/local/src/conda/python-3.11.13/Objects/call.c:214
#21 _PyEval_EvalFrameDefault from /usr/local/src/conda/python-3.11.13/Python/ceval.c:4769
#22 _PyEval_EvalFrame from /usr/local/src/conda/python-3.11.13/Include/internal/pycore_ceval.h:73
#23 _PyObject_FastCallDictTstate from /usr/local/src/conda/python-3.11.13/Objects/call.c:152
#24 type_call from /usr/local/src/conda/python-3.11.13/Objects/typeobject.c:1103
#25 _PyEval_EvalFrameDefault from /usr/local/src/conda/python-3.11.13/Python/ceval.c:4769
#26 _PyEval_EvalFrame from /usr/local/src/conda/python-3.11.13/Include/internal/pycore_ceval.h:73
#27 PyEval_EvalCode from /usr/local/src/conda/python-3.11.13/Python/ceval.c:1148
#28 run_eval_code_obj from /usr/local/src/conda/python-3.11.13/Python/pythonrun.c:1741
#29 run_mod from /usr/local/src/conda/python-3.11.13/Python/pythonrun.c:1762
#30 pyrun_file from /usr/local/src/conda/python-3.11.13/Python/pythonrun.c:1657
#31 _PyRun_SimpleFileObject from /usr/local/src/conda/python-3.11.13/Python/pythonrun.c:440
#32 _PyRun_AnyFileObject from /usr/local/src/conda/python-3.11.13/Python/pythonrun.c:79
#33 pymain_run_file_obj from /usr/local/src/conda/python-3.11.13/Modules/main.c:360
#34 Py_BytesMain from /usr/local/src/conda/python-3.11.13/Modules/main.c:738
#35 __libc_start_call_main from ??:0
#36 __libc_start_main_alias_2 from :0
#37 _start from ??:0

