#!/bin/bash
#SBATCH --job-name=blip3o_distance_evaluation
#SBATCH --partition=gpu_h100
#SBATCH --nodes=1
#SBATCH --gpus=1
#SBATCH --cpus-per-gpu=18
#SBATCH --time=6:00:00  # 6 hours should be sufficient for distance evaluation
#SBATCH --mem=0
#SBATCH --output=./slurm_out/distance_eval_%j.out
#SBATCH --error=./slurm_out/distance_eval_%j.err

echo "📏 BLIP3-o DiT Distance Evaluation (Task 3) - OPTIMIZED VERSION"
echo "================================================================"
echo "🎯 DISTANCE METRICS EVALUATION:"
echo "  • Direct distance between target and predicted embeddings"
echo "  • Multiple distance metrics (L2, L1, Cosine, MSE, MAE, RMSE)"
echo "  • Both raw and CLIP-aligned embedding spaces"
echo "  • Per-sample analysis and distribution statistics"
echo "  • Optimized batch processing for efficiency"
echo "================================================================"

# =============================================================================
# OPTIMIZATION OPTIONS
# =============================================================================

# OPTIMIZATION 1: Reduce sample size for faster evaluation
EVAL_MAX_SAMPLES=1000  # Reduced from 5000 to 1000 for faster eval
BATCH_SIZE=16          # Optimal batch size for distance computation (memory-efficient)

# OPTIMIZATION 2: Enable checkpointing (resume if previous task completed)
ENABLE_CHECKPOINTING=true
CHECKPOINT_DIR="${BLIP3O_WORKSPACE}/evaluation_checkpoints"

# OPTIMIZATION 3: Evaluation modes
RUN_ALIGNED_EVAL=true    # Run evaluation with CLIP visual projection (768-dim)
RUN_RAW_EVAL=true        # Run evaluation with raw embeddings (1024-dim)
SAVE_DETAILED=true       # Save detailed per-sample results

echo "🎯 Distance Evaluation Configuration (OPTIMIZED):"
echo "   Max samples: $EVAL_MAX_SAMPLES (reduced for speed)"
echo "   Batch size: $BATCH_SIZE (memory-optimized)"
echo "   Checkpointing: $ENABLE_CHECKPOINTING"
echo "   Run aligned evaluation: $RUN_ALIGNED_EVAL"
echo "   Run raw evaluation: $RUN_RAW_EVAL"
echo "   Save detailed results: $SAVE_DETAILED"

# =============================================================================
# ENVIRONMENT SETUP
# =============================================================================

echo ""
echo "🔧 Environment Setup..."
echo "======================="

# Load modules
module purge
module load 2024
module load Miniconda3/24.7.1-0
module load CUDA/12.6.0

# Activate conda environment
source activate eva_clip_env

# Setup directories
export BLIP3O_USER=$(whoami)
export BLIP3O_JOB_ID=${SLURM_JOB_ID}
export BLIP3O_WORKSPACE="/scratch-shared/${BLIP3O_USER}/blip3o_workspace"
export BLIP3O_CHECKPOINTS="${BLIP3O_WORKSPACE}/checkpoints"
export BLIP3O_JOB_TEMP="/scratch-local/${BLIP3O_USER}.${BLIP3O_JOB_ID}/blip3o_distance_eval_${BLIP3O_JOB_ID}"

# Create directories
mkdir -p "${BLIP3O_JOB_TEMP}"/{cache,results}
mkdir -p "$CHECKPOINT_DIR"

# Redirect model caches
export TORCH_HOME="${BLIP3O_JOB_TEMP}/cache/torch"
export HF_HOME="${BLIP3O_JOB_TEMP}/cache/huggingface"
export TRANSFORMERS_CACHE="${BLIP3O_JOB_TEMP}/cache/transformers"
mkdir -p "${TORCH_HOME}" "${HF_HOME}" "${TRANSFORMERS_CACHE}"

# =============================================================================
# MODEL AND DATA PATHS
# =============================================================================

echo ""
echo "📍 Setting up paths..."
echo "======================"

MODEL_PATH="/scratch-shared/scur2711/blip3o_workspace/checkpoints/blip3o_multi_gpu_fixed_cosine_13170504_20250716_034251"
COCO_ROOT="./data/coco"
RESULTS_DIR="${BLIP3O_JOB_TEMP}/results"
PERSISTENT_RESULTS_DIR="${BLIP3O_WORKSPACE}/evaluation_results/distance_eval_${BLIP3O_JOB_ID}_$(date +%Y%m%d_%H%M%S)"

mkdir -p "$RESULTS_DIR" "$PERSISTENT_RESULTS_DIR"

# Verify paths
if [ ! -d "$MODEL_PATH" ]; then
    echo "❌ Model not found: $MODEL_PATH"
    exit 1
fi

if [ ! -d "$COCO_ROOT" ]; then
    echo "❌ COCO dataset not found: $COCO_ROOT"
    exit 1
fi

echo "✅ Model: $MODEL_PATH"
echo "✅ COCO: $COCO_ROOT"
echo "✅ Results: $PERSISTENT_RESULTS_DIR"

# =============================================================================
# CHECKPOINTING FUNCTIONS
# =============================================================================

check_task_completed() {
    local task_name=$1
    local checkpoint_file="$CHECKPOINT_DIR/${task_name}_completed_${BLIP3O_JOB_ID}.flag"
    [ -f "$checkpoint_file" ]
}

mark_task_completed() {
    local task_name=$1
    local checkpoint_file="$CHECKPOINT_DIR/${task_name}_completed_${BLIP3O_JOB_ID}.flag"
    echo "$(date): Task $task_name completed" > "$checkpoint_file"
    echo "✅ Marked $task_name as completed"
}

# =============================================================================
# TASK 3A: DISTANCE EVALUATION WITH CLIP VISUAL PROJECTION (768-dim aligned)
# =============================================================================

if [ "$RUN_ALIGNED_EVAL" = "true" ]; then
    if [ "$ENABLE_CHECKPOINTING" = "true" ] && check_task_completed "distance_aligned"; then
        echo ""
        echo "⏭️  Task 3A (Distance - Aligned) already completed, skipping..."
    else
        echo ""
        echo "📏 Starting Task 3A: Distance Evaluation - CLIP Aligned Space (768-dim)"
        echo "======================================================================"
        echo "🎯 EVALUATION METHOD:"
        echo "   • Target: CLIP ViT-L/14 → visual projection → 768-dim aligned"
        echo "   • Predicted: EVA-CLIP → BLIP3-o → visual projection → 768-dim aligned"
        echo "   • Fair comparison in CLIP's aligned embedding space"
        echo "🚀 OPTIMIZATIONS APPLIED:"
        echo "   • Sample size: $EVAL_MAX_SAMPLES (reduced for speed)"
        echo "   • Batch size: $BATCH_SIZE (memory-optimized)"
        echo "   • Detailed per-sample analysis: $SAVE_DETAILED"

        DISTANCE_ALIGNED_START_TIME=$(date +%s)

        python evaluate_distance.py \
            --blip3o_model_path "$MODEL_PATH" \
            --coco_root "$COCO_ROOT" \
            --max_samples $EVAL_MAX_SAMPLES \
            --batch_size $BATCH_SIZE \
            --use_visual_projection \
            --device cuda \
            --results_dir "${RESULTS_DIR}/distance_aligned" \
            $([ "$SAVE_DETAILED" = "true" ] && echo "--save_detailed") \
            --verbose

        DISTANCE_ALIGNED_EXIT_CODE=$?
        DISTANCE_ALIGNED_END_TIME=$(date +%s)
        DISTANCE_ALIGNED_DURATION=$((DISTANCE_ALIGNED_END_TIME - DISTANCE_ALIGNED_START_TIME))

        if [ $DISTANCE_ALIGNED_EXIT_CODE -eq 0 ]; then
            echo "✅ Task 3A completed successfully in ${DISTANCE_ALIGNED_DURATION}s"
            if [ "$ENABLE_CHECKPOINTING" = "true" ]; then
                mark_task_completed "distance_aligned"
            fi
        else
            echo "❌ Task 3A failed with exit code: $DISTANCE_ALIGNED_EXIT_CODE"
        fi
    fi
else
    echo "⏭️  Skipping Task 3A (distance aligned) as requested"
    DISTANCE_ALIGNED_EXIT_CODE=0
fi

# =============================================================================
# TASK 3B: DISTANCE EVALUATION WITH RAW EMBEDDINGS (1024-dim)
# =============================================================================

if [ "$RUN_RAW_EVAL" = "true" ]; then
    if [ "$ENABLE_CHECKPOINTING" = "true" ] && check_task_completed "distance_raw"; then
        echo ""
        echo "⏭️  Task 3B (Distance - Raw) already completed, skipping..."
    else
        echo ""
        echo "📏 Starting Task 3B: Distance Evaluation - Raw CLIP Space (1024-dim)"
        echo "===================================================================="
        echo "🎯 EVALUATION METHOD:"
        echo "   • Target: CLIP ViT-L/14 → raw 1024-dim features (no projection)"
        echo "   • Predicted: EVA-CLIP → BLIP3-o → raw 1024-dim features (no projection)"
        echo "   • Direct comparison in CLIP's native feature space"
        echo "🚀 OPTIMIZATIONS APPLIED:"
        echo "   • Sample size: $EVAL_MAX_SAMPLES (reduced for speed)"
        echo "   • Batch size: $BATCH_SIZE (memory-optimized)"
        echo "   • Detailed per-sample analysis: $SAVE_DETAILED"

        DISTANCE_RAW_START_TIME=$(date +%s)

        python evaluate_distance.py \
            --blip3o_model_path "$MODEL_PATH" \
            --coco_root "$COCO_ROOT" \
            --max_samples $EVAL_MAX_SAMPLES \
            --batch_size $BATCH_SIZE \
            --device cuda \
            --results_dir "${RESULTS_DIR}/distance_raw" \
            $([ "$SAVE_DETAILED" = "true" ] && echo "--save_detailed") \
            --verbose

        DISTANCE_RAW_EXIT_CODE=$?
        DISTANCE_RAW_END_TIME=$(date +%s)
        DISTANCE_RAW_DURATION=$((DISTANCE_RAW_END_TIME - DISTANCE_RAW_START_TIME))

        if [ $DISTANCE_RAW_EXIT_CODE -eq 0 ]; then
            echo "✅ Task 3B completed successfully in ${DISTANCE_RAW_DURATION}s"
            if [ "$ENABLE_CHECKPOINTING" = "true" ]; then
                mark_task_completed "distance_raw"
            fi
        else
            echo "❌ Task 3B failed with exit code: $DISTANCE_RAW_EXIT_CODE"
        fi
    fi
else
    echo "⏭️  Skipping Task 3B (distance raw) as requested"
    DISTANCE_RAW_EXIT_CODE=0
fi

# =============================================================================
# RESULTS ARCHIVING AND ANALYSIS
# =============================================================================

echo ""
echo "📁 Archiving Distance Evaluation Results..."
echo "==========================================="

if [ -d "$RESULTS_DIR" ] && [ "$(ls -A "$RESULTS_DIR")" ]; then
    cp -r "$RESULTS_DIR"/* "$PERSISTENT_RESULTS_DIR/"
    
    # Create comprehensive summary
    SUMMARY_FILE="$PERSISTENT_RESULTS_DIR/distance_evaluation_summary.txt"
    
    cat > "$SUMMARY_FILE" << EOF
BLIP3-o DiT Distance Evaluation Summary (Task 3)
================================================
Job ID: $SLURM_JOB_ID
Date: $(date)
Node: $SLURMD_NODENAME

🎯 DISTANCE EVALUATION OVERVIEW:
This evaluation measures direct distances between target CLIP embeddings 
and predicted embeddings generated by the BLIP3-o DiT model.

🚀 OPTIMIZATIONS APPLIED:
- Reduced sample size: $EVAL_MAX_SAMPLES (from 5000)
- Optimized batch size: $BATCH_SIZE (memory-efficient)
- Extended time limit: 6 hours
- Checkpointing enabled: $ENABLE_CHECKPOINTING
- Dual evaluation modes for comprehensive analysis

📊 EVALUATION METHODS:
Method A (Aligned): Both embeddings projected to CLIP's 768-dim aligned space
Method B (Raw): Direct comparison in CLIP's native 1024-dim feature space

Model Information:
- Path: $MODEL_PATH
- COCO samples evaluated: $EVAL_MAX_SAMPLES
- Evaluation modes: $([ "$RUN_ALIGNED_EVAL" = "true" ] && echo "Aligned ") $([ "$RUN_RAW_EVAL" = "true" ] && echo "Raw")

Task Results:
- Task 3A (Distance - Aligned): $([ $DISTANCE_ALIGNED_EXIT_CODE -eq 0 ] && echo "SUCCESS" || echo "FAILED")
- Task 3B (Distance - Raw): $([ $DISTANCE_RAW_EXIT_CODE -eq 0 ] && echo "SUCCESS" || echo "FAILED")

📏 DISTANCE METRICS COMPUTED:
- L2 Distance (Euclidean): Overall embedding similarity
- L1 Distance (Manhattan): Less sensitive to outliers  
- Cosine Distance: Directional similarity (1 - cosine_similarity)
- MSE/MAE/RMSE: Standard regression error metrics
- Per-sample statistics and distribution analysis

Results Location: $PERSISTENT_RESULTS_DIR
EOF

    echo "✅ Results archived to: $PERSISTENT_RESULTS_DIR"
    echo "📄 Summary: $SUMMARY_FILE"
    
    # Show quick distance results if available
    if [ -f "$PERSISTENT_RESULTS_DIR/distance_aligned/distance_summary.json" ]; then
        echo ""
        echo "📏 Quick Distance Results - CLIP Aligned Space (768-dim):"
        python -c "
import json
try:
    with open('$PERSISTENT_RESULTS_DIR/distance_aligned/distance_summary.json', 'r') as f:
        data = json.load(f)
    print(f'  L2 Distance (mean):        {data.get(\"l2_distance_mean\", 0):.6f}')
    print(f'  Cosine Similarity (mean):  {data.get(\"cosine_similarity_mean\", 0):.4f}')
    print(f'  MSE Distance:              {data.get(\"mse_distance\", 0):.6f}')
    print(f'  RMSE Distance:             {data.get(\"rmse_distance\", 0):.6f}')
    print(f'  Samples evaluated:         {data.get(\"num_images_evaluated\", 0)}')
    print(f'  Embedding space:           {data.get(\"embedding_space\", \"unknown\")}')
except Exception as e: 
    print(f'  Error reading aligned results: {e}')
"
    fi
    
    if [ -f "$PERSISTENT_RESULTS_DIR/distance_raw/distance_summary.json" ]; then
        echo ""
        echo "📏 Quick Distance Results - Raw CLIP Space (1024-dim):"
        python -c "
import json
try:
    with open('$PERSISTENT_RESULTS_DIR/distance_raw/distance_summary.json', 'r') as f:
        data = json.load(f)
    print(f'  L2 Distance (mean):        {data.get(\"l2_distance_mean\", 0):.6f}')
    print(f'  Cosine Similarity (mean):  {data.get(\"cosine_similarity_mean\", 0):.4f}')
    print(f'  MSE Distance:              {data.get(\"mse_distance\", 0):.6f}')
    print(f'  RMSE Distance:             {data.get(\"rmse_distance\", 0):.6f}')
    print(f'  Samples evaluated:         {data.get(\"num_images_evaluated\", 0)}')
    print(f'  Embedding space:           {data.get(\"embedding_space\", \"unknown\")}')
except Exception as e: 
    print(f'  Error reading raw results: {e}')
"
    fi
    
    # Comparison analysis if both evaluations completed
    if [ $DISTANCE_ALIGNED_EXIT_CODE -eq 0 ] && [ $DISTANCE_RAW_EXIT_CODE -eq 0 ]; then
        echo ""
        echo "🔍 Comparative Analysis (Aligned vs Raw):"
        python -c "
import json
try:
    # Load both results
    with open('$PERSISTENT_RESULTS_DIR/distance_aligned/distance_summary.json', 'r') as f:
        aligned_data = json.load(f)
    with open('$PERSISTENT_RESULTS_DIR/distance_raw/distance_summary.json', 'r') as f:
        raw_data = json.load(f)
    
    # Compare key metrics
    metrics = ['l2_distance_mean', 'cosine_similarity_mean', 'mse_distance']
    print('  Metric                     | Aligned (768-dim) | Raw (1024-dim)   | Difference')
    print('  ---------------------------|-------------------|------------------|------------------')
    
    for metric in metrics:
        aligned_val = aligned_data.get(metric, 0)
        raw_val = raw_data.get(metric, 0)
        diff = raw_val - aligned_val
        print(f'  {metric:25s}  | {aligned_val:15.6f}   | {raw_val:14.6f}   | {diff:+.6f}')
    
    print('')
    print('  Notes:')
    print('  • Lower distances = better prediction quality')
    print('  • Higher cosine similarity = better directional alignment')
    print('  • Aligned space provides fair comparison (same dimensionality)')
    print('  • Raw space shows direct feature space differences')
    
except Exception as e: 
    print(f'  Error in comparative analysis: {e}')
"
    fi
fi

# =============================================================================
# FINAL SUMMARY
# =============================================================================

echo ""
echo "🎉 DISTANCE EVALUATION COMPLETED!"
echo "================================="

TOTAL_DURATION=$SECONDS
echo "📊 Final Summary:"
echo "   Task 3A (Distance - Aligned): $([ $DISTANCE_ALIGNED_EXIT_CODE -eq 0 ] && echo "✅ SUCCESS" || echo "❌ FAILED")"
echo "   Task 3B (Distance - Raw): $([ $DISTANCE_RAW_EXIT_CODE -eq 0 ] && echo "✅ SUCCESS" || echo "❌ FAILED")"
echo "   Sample size: $EVAL_MAX_SAMPLES (optimized)"
echo "   Total runtime: $TOTAL_DURATION seconds"
echo "   Results: $PERSISTENT_RESULTS_DIR"

echo ""
echo "📏 Distance Evaluation Benefits:"
echo "   • Direct measurement of embedding reconstruction quality"
echo "   • Multiple distance metrics for comprehensive analysis"
echo "   • Both aligned and raw embedding space evaluation"
echo "   • Per-sample analysis enables detailed inspection"
echo "   • Distribution statistics reveal model behavior patterns"

echo ""
echo "🔍 Interpretation Guide:"
echo "   • L2/L1 distances: Lower values indicate better reconstruction"
echo "   • Cosine similarity: Higher values indicate better directional alignment"
echo "   • MSE/MAE/RMSE: Standard regression metrics (lower = better)"
echo "   • Aligned space (768-dim): Fair comparison methodology"
echo "   • Raw space (1024-dim): Direct feature space evaluation"

# Determine overall success
OVERALL_SUCCESS=true
if [ "$RUN_ALIGNED_EVAL" = "true" ] && [ $DISTANCE_ALIGNED_EXIT_CODE -ne 0 ]; then
    OVERALL_SUCCESS=false
fi
if [ "$RUN_RAW_EVAL" = "true" ] && [ $DISTANCE_RAW_EXIT_CODE -ne 0 ]; then
    OVERALL_SUCCESS=false
fi

if [ "$OVERALL_SUCCESS" = "true" ]; then
    echo ""
    echo "🚀 Distance evaluation completed successfully!"
    echo "📈 Check the results for detailed distance metrics and analysis."
    exit 0
else
    echo ""
    echo "⚠️  Some distance evaluations failed. Check logs for details."
    exit 1
fi