#!/bin/bash
#SBATCH --job-name=blip3o_training_fixed
#SBATCH --partition=gpu_a100
#SBATCH --nodes=1
#SBATCH --gpus=3
#SBATCH --ntasks=1
#SBATCH --cpus-per-gpu=9
#SBATCH --time=12:00:00
#SBATCH --mem=64GB
#SBATCH --output=./slurm_out/blip3o_training_fixed_%j.out
#SBATCH --error=./slurm_out/blip3o_training_fixed_%j.err

# =============================================================================
# FIXED BLIP3-o TRAINING JOB SCRIPT
# Training only (no evaluation) with fixed TrainingArguments
# =============================================================================

echo "üöÄ Starting FIXED BLIP3-o Training Job"
echo "Job ID: ${SLURM_JOB_ID}"
echo "Node: $(hostname)"
echo "Time: $(date)"
echo "============================================================"

cd $SLURM_SUBMIT_DIR

# Setup environment
module purge
module load 2024
module load Miniconda3/24.7.1-0
module load CUDA/12.6.0
source activate eva_clip_env

# Workspace setup
export USER=$(whoami)
export JOB_ID=${SLURM_JOB_ID}
export WORKSPACE="/scratch-shared/${USER}/blip3o_workspace"
export EMBEDDINGS_DIR="${WORKSPACE}/embeddings"
export CHECKPOINTS="${WORKSPACE}/checkpoints"

# Configuration - FIXED for single shard training
TRAINING_MODE="patch_only"  # patch_only or cls_patch
EMBEDDINGS_DIR="/scratch-shared/azadaianchuk1/blip3o_workspace/embeddings/patch_only_256_tokens"
OUTPUT_DIR="${CHECKPOINTS}/training_fixed_${TRAINING_MODE}_${JOB_ID}_$(date +%Y%m%d_%H%M%S)"
mkdir -p "${OUTPUT_DIR}"

# Training parameters - FIXED
MODEL_SIZE="base"
NUM_EPOCHS=10
BATCH_SIZE=64
LEARNING_RATE=5e-5
GRADIENT_ACCUMULATION_STEPS=2
LOGGING_STEPS=5
SAVE_STEPS=100
SHARD_INDEX=0

echo "‚öôÔ∏è FIXED Training Configuration:"
echo "   Mode: $TRAINING_MODE"
echo "   Embeddings: $EMBEDDINGS_DIR"
echo "   Output: $OUTPUT_DIR"
echo "   Model: $MODEL_SIZE"
echo "   Batch size: $BATCH_SIZE"
echo "   Learning rate: $LEARNING_RATE"
echo "   Epochs: $NUM_EPOCHS"
echo "   Shard index: $SHARD_INDEX"

# Verify embeddings directory exists
if [ ! -d "$EMBEDDINGS_DIR" ]; then
    echo "‚ùå Embeddings directory not found: $EMBEDDINGS_DIR"
    echo "Available directories in workspace:"
    ls -la "$WORKSPACE/embeddings/" || echo "No embeddings directory found"
    exit 1
fi

# Check for shard files
echo "üîç Checking for shard files..."
SHARD_FILES=$(find "$EMBEDDINGS_DIR" -name "embeddings_shard_*.pkl" | head -5)
if [ -z "$SHARD_FILES" ]; then
    echo "‚ùå No shard files found in $EMBEDDINGS_DIR"
    echo "Directory contents:"
    ls -la "$EMBEDDINGS_DIR"
    exit 1
else
    echo "‚úÖ Found shard files:"
    echo "$SHARD_FILES"
fi

# Launch training with FIXED script
echo "üöÄ Starting FIXED Training Process..."
python train_blip3o_enhanced.py \
    --chunked_embeddings_dir "$EMBEDDINGS_DIR" \
    --output_dir "$OUTPUT_DIR" \
    --training_mode "$TRAINING_MODE" \
    --shard_index $SHARD_INDEX \
    --model_size "$MODEL_SIZE" \
    --num_epochs $NUM_EPOCHS \
    --batch_size $BATCH_SIZE \
    --learning_rate $LEARNING_RATE \
    --gradient_accumulation_steps $GRADIENT_ACCUMULATION_STEPS \
    --logging_steps $LOGGING_STEPS \
    --save_steps $SAVE_STEPS \
    --fp16

# Check training result
TRAINING_EXIT_CODE=$?

if [ $TRAINING_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ FIXED Training completed successfully!"
    echo "   Model saved to: $OUTPUT_DIR"
    echo "   Training mode: $TRAINING_MODE"
    echo ""
    echo "üìä Training Summary:"
    if [ -f "$OUTPUT_DIR/training_info.json" ]; then
        echo "Training info saved to: $OUTPUT_DIR/training_info.json"
        # Show some key info
        python -c "
import json
try:
    with open('$OUTPUT_DIR/training_info.json', 'r') as f:
        info = json.load(f)
    print(f\"   Training mode: {info.get('training_mode', 'unknown')}\")
    print(f\"   Epochs completed: {info.get('total_epochs', 'unknown')}\")
    print(f\"   Total steps: {info.get('total_steps', 'unknown')}\")
    loss_stats = info.get('loss_statistics', {})
    if loss_stats:
        print(f\"   Final loss: {loss_stats.get('current_loss', 'unknown')}\")
        print(f\"   Loss trend: {loss_stats.get('loss_trend', 'unknown')}\")
except Exception as e:
    print(f\"   Could not read training info: {e}\")
"
    fi
    
    echo ""
    echo "üéØ Next Steps:"
    echo "1. Check the training logs in $OUTPUT_DIR/logs/"
    echo "2. Inspect the saved model in $OUTPUT_DIR/"
    echo "3. Run evaluation script if needed:"
    echo "   python eval_blip3o_patch_similarity.py \\"
    echo "     --model_path $OUTPUT_DIR \\"
    echo "     --chunked_embeddings_dir $EMBEDDINGS_DIR \\"
    echo "     --training_mode $TRAINING_MODE"
    
else
    echo "‚ùå FIXED Training failed with exit code: $TRAINING_EXIT_CODE"
    echo "Check the error logs above for details"
    
    # Show some diagnostic info
    echo ""
    echo "üîç Diagnostic Information:"
    echo "Working directory: $(pwd)"
    echo "Python path:"
    python -c "import sys; print('\n'.join(sys.path))"
    echo ""
    echo "Available modules:"
    python -c "
try:
    import src.modules.models.blip3o_patch_dit
    print('‚úÖ Model module available')
except Exception as e:
    print(f'‚ùå Model module: {e}')

try:
    import src.modules.losses.blip3o_flow_matching_loss
    print('‚úÖ Loss module available')
except Exception as e:
    print(f'‚ùå Loss module: {e}')

try:
    import src.modules.trainers.blip3o_training_only_trainer
    print('‚úÖ Trainer module available')
except Exception as e:
    print(f'‚ùå Trainer module: {e}')

try:
    import src.modules.datasets.blip3o_dataset
    print('‚úÖ Dataset module available')
except Exception as e:
    print(f'‚ùå Dataset module: {e}')
"
fi

echo ""
echo "üèÅ Job completed at $(date)"
echo "Exit code: $TRAINING_EXIT_CODE"

exit $TRAINING_EXIT_CODE