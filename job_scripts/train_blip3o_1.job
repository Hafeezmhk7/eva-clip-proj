#!/bin/bash
#SBATCH --job-name=blip3o_train
#SBATCH --partition=gpu_a100
#SBATCH --nodes=1
#SBATCH --gpus=3
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=18
#SBATCH --time=12:00:00
#SBATCH --mem=64G
#SBATCH --output=./slurm_out/blip3o_train_%j.out
#SBATCH --error=./slurm_out/blip3o_train_%j.err

# =============================================================================
# FIXED BLIP3-o Training Job - Proper Implementation
# Trains on 1 shard with evaluation every 100 steps
# =============================================================================

echo "üöÄ FIXED BLIP3-o Training with Evaluation"
echo "========================================="
echo "Job ID: ${SLURM_JOB_ID}"
echo "Node: $(hostname)"
echo "Time: $(date)"
echo "GPU: $(nvidia-smi --query-gpu=name --format=csv,noheader,nounits | head -1)"
echo "========================================="

cd $SLURM_SUBMIT_DIR

# Setup environment
module purge
module load 2024
module load Miniconda3/24.7.1-0
module load CUDA/12.6.0
source activate eva_clip_env

# Configuration
EMBEDDINGS_DIR="/scratch-shared/azadaianchuk1/blip3o_workspace/embeddings/patch_only_256_tokens"
OUTPUT_DIR="./checkpoints/blip3o_training_$(date +%Y%m%d_%H%M%S)"
TRAINING_MODE="patch_only"
MODEL_SIZE="base"

# Training parameters - Aligned with BLIP3-o paper
NUM_EPOCHS=10
BATCH_SIZE=32
LEARNING_RATE=1e-4
GRADIENT_ACCUMULATION_STEPS=2

# Evaluation parameters - Key to our implementation
EVAL_EVERY_N_STEPS=100
EVAL_NUM_SAMPLES=1000
EVAL_INFERENCE_STEPS=50

# Create output directory
mkdir -p "${OUTPUT_DIR}"
mkdir -p ./slurm_out

echo ""
echo "‚öôÔ∏è Training Configuration:"
echo "=========================="
echo "Embeddings: $EMBEDDINGS_DIR"
echo "Output: $OUTPUT_DIR"
echo "Training mode: $TRAINING_MODE"
echo "Model size: $MODEL_SIZE"
echo "Batch size: $BATCH_SIZE"
echo "Learning rate: $LEARNING_RATE"
echo "Epochs: $NUM_EPOCHS"
echo "Evaluation every: $EVAL_EVERY_N_STEPS steps"
echo "Evaluation samples: $EVAL_NUM_SAMPLES"
echo ""

# Verify embeddings exist
if [ ! -d "$EMBEDDINGS_DIR" ]; then
    echo "‚ùå Embeddings directory not found: $EMBEDDINGS_DIR"
    echo "Available embeddings:"
    ls -la "/scratch-shared/azadaianchuk1/blip3o_workspace/embeddings/" 2>/dev/null || echo "No embeddings found"
    exit 1
fi

echo "‚úÖ Embeddings verified: $EMBEDDINGS_DIR"

# Verify training script exists
if [ ! -f "train_blip3o_enhanced.py" ]; then
    echo "‚ùå Training script not found: train_blip3o_enhanced.py"
    exit 1
fi

echo "‚úÖ Training script found"

echo ""
echo "üöÄ Starting FIXED Training..."
echo "=============================="
echo "Expected behavior:"
echo "  ‚Ä¢ Velocity similarity should increase from ~0.01"
echo "  ‚Ä¢ Embedding similarity should increase during training"
echo "  ‚Ä¢ Norms should be similar (both ~1.0 with normalization)"
echo "  ‚Ä¢ Evaluation every 100 steps to track progress"
echo "  ‚Ä¢ Final evaluation should match training metrics"
echo ""

# Launch training with evaluation
python train_blip3o_enhanced.py \
    --chunked_embeddings_dir "$EMBEDDINGS_DIR" \
    --output_dir "$OUTPUT_DIR" \
    --training_mode "$TRAINING_MODE" \
    --model_size "$MODEL_SIZE" \
    --num_epochs $NUM_EPOCHS \
    --batch_size $BATCH_SIZE \
    --learning_rate $LEARNING_RATE \
    --gradient_accumulation_steps $GRADIENT_ACCUMULATION_STEPS \
    --eval_every_n_steps $EVAL_EVERY_N_STEPS \
    --eval_num_samples $EVAL_NUM_SAMPLES \
    --eval_inference_steps $EVAL_INFERENCE_STEPS \
    --max_training_shards 1 \
    --fp16 \
    --logging_steps 10 \
    --save_steps 200

TRAINING_EXIT_CODE=$?

echo ""
echo "========================================"
echo "üìä Training Results"
echo "========================================"

if [ $TRAINING_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ Training completed successfully!"
    
    echo ""
    echo "üìã Training Summary:"
    echo "==================="
    
    # Find and display training info
    TRAINING_INFO="$OUTPUT_DIR/training_info.json"
    
    if [ -f "$TRAINING_INFO" ]; then
        echo ""
        echo "üìä Final Metrics:"
        echo "=================="
        
        # Extract key metrics using Python
        python -c "
import json
try:
    with open('$TRAINING_INFO', 'r') as f:
        data = json.load(f)
    
    if 'final_results' in data and 'training_summary' in data['final_results']:
        summary = data['final_results']['training_summary']
        print(f'üìà Final Velocity Similarity: {summary.get(\"final_velocity_sim\", 0):.4f}')
        print(f'üìà Best Velocity Similarity: {summary.get(\"best_velocity_sim\", 0):.4f}')
        print(f'üéØ Final Embedding Similarity: {summary.get(\"final_embedding_sim\", 0):.4f}')
        print(f'üéØ Best Embedding Similarity: {summary.get(\"best_embedding_sim\", 0):.4f}')
        print(f'üè• Training Health: {summary.get(\"training_health\", \"Unknown\")}')
        print(f'üìä Evaluations Performed: {summary.get(\"evaluations_performed\", 0)}')
        
        # Assessment
        best_emb = summary.get('best_embedding_sim', 0)
        if best_emb > 0.1:
            print('üéâ SUCCESS: Good embedding generation!')
        elif best_emb > 0.05:
            print('üìà PROGRESS: Shows learning, may need more training')
        else:
            print('‚ö†Ô∏è NEEDS WORK: Low similarity, check implementation')
    
    if 'final_results' in data and 'final_evaluation' in data['final_results']:
        eval_results = data['final_results']['final_evaluation']
        if eval_results:
            print(f'')
            print(f'üîç Final Evaluation Results:')
            print(f'   Overall Similarity: {eval_results.get(\"overall_embedding_similarity\", 0):.4f}')
            print(f'   High Quality Images: {eval_results.get(\"high_quality_images\", 0)*100:.1f}%')
            print(f'   Samples Evaluated: {eval_results.get(\"samples_evaluated\", 0):,}')
            
except Exception as e:
    print(f'Could not parse training info: {e}')
"
        
        echo ""
        echo "üìÅ Training artifacts saved to: $OUTPUT_DIR"
        echo "üìÑ Training info: $TRAINING_INFO"
    else
        echo "‚ö†Ô∏è No training info file found"
    fi
    
    echo ""
    echo "üéØ Next Steps:"
    echo "=============="
    echo "1. Run comprehensive evaluation:"
    echo "   sbatch job_scripts/evaluate_blip3o.job $OUTPUT_DIR"
    echo ""
    echo "2. Check if training and evaluation metrics match"
    echo "3. If successful, scale to more shards"
    
    echo ""
    echo "‚úÖ SUCCESS: FIXED Training completed!"
    
else
    echo "‚ùå FAILED: Training exit code $TRAINING_EXIT_CODE"
    echo ""
    echo "üí° Troubleshooting:"
    echo "  ‚Ä¢ Check log files in ./slurm_out/"
    echo "  ‚Ä¢ Verify embeddings and model paths"
    echo "  ‚Ä¢ Check CUDA memory usage"
    echo "  ‚Ä¢ Try smaller batch size if OOM"
fi

echo ""
echo "üèÅ Job completed at $(date)"
echo "========================================"

exit $TRAINING_EXIT_CODE