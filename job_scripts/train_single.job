#!/bin/bash
#SBATCH --partition=gpu_h100
#SBATCH --gpus=1                    # Single GPU - clean and simple
#SBATCH --job-name=blip3o_256_single_gpu
#SBATCH --time=12:00:00
#SBATCH --output=./slurm_out/train_single_gpu_%j.out
#SBATCH --error=./slurm_out/train_single_gpu_%j.err
#SBATCH --mem=32GB                  # Sufficient for single GPU
#SBATCH --cpus-per-task=4           # Reasonable CPU allocation
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1

echo "🚀 BLIP3-o DiT Single GPU Training - 256 TOKENS (Full Model)"
echo "============================================================="
echo "Job ID: $SLURM_JOB_ID"
echo "Node: $SLURMD_NODENAME" 
echo "Date: $(date)"
echo "Working directory: $(pwd)"
echo "User: $(whoami)"
echo "CUDA Visible Devices: $CUDA_VISIBLE_DEVICES"

# =============================================================================
# ENVIRONMENT SETUP
# =============================================================================

echo ""
echo "🔧 Environment Setup..."
echo "======================="

# Load modules
module purge
module load 2024
module load Miniconda3/24.7.1-0
module load CUDA/12.6.0

# Activate conda environment
source activate eva_clip_env

# Set up Snellius scratch directories
export SCRATCH_SHARED="/scratch-shared"
export SCRATCH_LOCAL="/scratch-local"
export BLIP3O_USER=$(whoami)
export BLIP3O_JOB_ID=${SLURM_JOB_ID}

# Persistent workspace
export BLIP3O_WORKSPACE="/scratch-shared/${BLIP3O_USER}/blip3o_workspace"
export BLIP3O_EMBEDDINGS="${BLIP3O_WORKSPACE}/embeddings"
export BLIP3O_CHECKPOINTS="${BLIP3O_WORKSPACE}/checkpoints"
export BLIP3O_LOGS="${BLIP3O_WORKSPACE}/logs"

# Job-specific temp
export BLIP3O_JOB_TEMP="/scratch-local/${BLIP3O_USER}.${BLIP3O_JOB_ID}/blip3o_job_${BLIP3O_JOB_ID}"
export BLIP3O_CACHE="${BLIP3O_JOB_TEMP}/cache"
export BLIP3O_TEMP_CHECKPOINTS="${BLIP3O_JOB_TEMP}/temp_checkpoints"

# Create directories
mkdir -p "${BLIP3O_WORKSPACE}"/{embeddings,checkpoints,logs,metadata}
mkdir -p "${BLIP3O_JOB_TEMP}"/{cache,temp_checkpoints}

# Redirect model caches
export TORCH_HOME="${BLIP3O_CACHE}/torch"
export HF_HOME="${BLIP3O_CACHE}/huggingface"
export TRANSFORMERS_CACHE="${BLIP3O_CACHE}/transformers"
export WANDB_DIR="${BLIP3O_LOGS}/wandb"

# Create cache directories
mkdir -p "${TORCH_HOME}" "${HF_HOME}" "${TRANSFORMERS_CACHE}" "${WANDB_DIR}"

echo "✅ Environment configured"
echo "   Workspace: ${BLIP3O_WORKSPACE}"
echo "   Job temp: ${BLIP3O_JOB_TEMP}"

# Check GPU info
echo ""
echo "🎮 GPU Information:"
nvidia-smi -L
echo ""

# =============================================================================
# EMBEDDINGS VALIDATION
# =============================================================================

echo "🔍 Validating embeddings..."
echo "=========================="

# Find embeddings
EMBEDDINGS_DIR=$(find "${BLIP3O_EMBEDDINGS}" -name "*chunked*256*" -type d | head -1)

if [ -z "$EMBEDDINGS_DIR" ]; then
    echo "❌ No 256-token embeddings found in ${BLIP3O_EMBEDDINGS}"
    echo "Available directories:"
    ls -la "${BLIP3O_EMBEDDINGS}" 2>/dev/null || echo "   (none)"
    exit 1
fi

echo "✅ Found embeddings: $EMBEDDINGS_DIR"

# Validate manifest
MANIFEST_FILE="$EMBEDDINGS_DIR/embeddings_manifest.json"
if [ ! -f "$MANIFEST_FILE" ]; then
    echo "❌ Manifest file not found: $MANIFEST_FILE"
    exit 1
fi

# Show embeddings info
python -c "
import json
try:
    with open('$MANIFEST_FILE', 'r') as f:
        manifest = json.load(f)
    print(f'📊 Dataset Information:')
    print(f'   Total shards: {manifest[\"total_shards\"]}')
    print(f'   Total samples: {manifest[\"total_samples\"]:,}')
    print(f'   Total size: {manifest[\"total_size_mb\"]:.1f} MB')
    print(f'   Format: {manifest[\"format_version\"]}')
except Exception as e:
    print(f'❌ Failed to read manifest: {e}')
    exit(1)
"

echo "✅ Embeddings validated"

# =============================================================================
# TRAINING SETUP
# =============================================================================

echo ""
echo "📁 Training Setup..."
echo "=================="

# Create training directories
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
TRAINING_NAME="blip3o_256_single_gpu_${SLURM_JOB_ID}_${TIMESTAMP}"

TEMP_CHECKPOINT_DIR="${BLIP3O_TEMP_CHECKPOINTS}/${TRAINING_NAME}"
PERSISTENT_CHECKPOINT_DIR="${BLIP3O_CHECKPOINTS}/${TRAINING_NAME}"
FINAL_MODEL_DIR="${HOME}/models/blip3o_256_single_gpu_${TIMESTAMP}"

mkdir -p "$TEMP_CHECKPOINT_DIR"
mkdir -p "$PERSISTENT_CHECKPOINT_DIR"
mkdir -p "$FINAL_MODEL_DIR"

echo "✅ Training directories created:"
echo "   Temp: $TEMP_CHECKPOINT_DIR"
echo "   Persistent: $PERSISTENT_CHECKPOINT_DIR"
echo "   Final: $FINAL_MODEL_DIR"

# =============================================================================
# SINGLE GPU TRAINING - FULL MODEL
# =============================================================================

echo ""
echo "🚀 Starting Single GPU Training - Full Model Size..."
echo "==================================================="

echo "🔧 Training Configuration:"
echo "   🎯 Model: Full size (not reduced)"
echo "   📐 Hidden dimension: 768 (increased from 512)"
echo "   🏗️  Layers: 16 (increased from 12)" 
echo "   🎭 Attention heads: 12 (increased from 8)"
echo "   📦 Batch size: 12 (conservative for memory)"
echo "   🔄 Gradient accumulation: 16 (effective batch = 192)"
echo "   📊 Evaluation: Limited (memory safe)"
echo "   💾 Memory optimizations: All enabled"
echo ""

# Run training with FULL model configuration
python train_blip3o_dit.py \
  --auto_find_embeddings \
  --output_dir "${TEMP_CHECKPOINT_DIR}" \
  --batch_size 12 \
  --eval_batch_size 4 \
  --num_epochs 3 \
  --model_dim 768 \
  --num_heads 12 \
  --num_layers 16 \
  --learning_rate 5e-5 \
  --weight_decay 0.01 \
  --warmup_steps 50 \
  --gradient_accumulation_steps 16 \
  --fp16 \
  --minimal_eval

TRAINING_EXIT_CODE=$?

echo ""
echo "🎯 TRAINING COMPLETED WITH EXIT CODE: $TRAINING_EXIT_CODE"

# =============================================================================
# FALLBACK IF NEEDED
# =============================================================================

if [ $TRAINING_EXIT_CODE -ne 0 ]; then
    echo ""
    echo "⚠️  Full model training failed. Trying medium model..."
    echo "=================================================="
    
    echo "🔧 Medium Model Configuration:"
    echo "   📐 Hidden dimension: 512 (medium)"
    echo "   🏗️  Layers: 12 (medium)"
    echo "   🎭 Attention heads: 8 (medium)"
    echo "   📦 Batch size: 8 (more conservative)"
    echo ""
    
    python train_blip3o_dit.py \
      --auto_find_embeddings \
      --output_dir "${TEMP_CHECKPOINT_DIR}" \
      --batch_size 8 \
      --eval_batch_size 4 \
      --num_epochs 3 \
      --model_dim 512 \
      --num_heads 8 \
      --num_layers 12 \
      --learning_rate 5e-5 \
      --weight_decay 0.01 \
      --warmup_steps 30 \
      --gradient_accumulation_steps 24 \
      --fp16 \
      --minimal_eval
    
    TRAINING_EXIT_CODE=$?
    echo "🎯 MEDIUM MODEL COMPLETED WITH EXIT CODE: $TRAINING_EXIT_CODE"
fi

# =============================================================================
# FINAL FALLBACK
# =============================================================================

if [ $TRAINING_EXIT_CODE -ne 0 ]; then
    echo ""
    echo "⚠️  Medium model failed. Trying minimal safe model..."
    echo "=============================================="
    
    echo "🔧 Minimal Safe Configuration:"
    echo "   📐 Hidden dimension: 256 (minimal)"
    echo "   🏗️  Layers: 8 (minimal)"
    echo "   🎭 Attention heads: 4 (minimal)"
    echo "   📦 Batch size: 4 (ultra conservative)"
    echo ""
    
    python train_blip3o_dit.py \
      --auto_find_embeddings \
      --output_dir "${TEMP_CHECKPOINT_DIR}" \
      --batch_size 4 \
      --eval_batch_size 2 \
      --num_epochs 2 \
      --model_dim 256 \
      --num_heads 4 \
      --num_layers 8 \
      --learning_rate 5e-5 \
      --weight_decay 0.01 \
      --warmup_steps 20 \
      --gradient_accumulation_steps 48 \
      --fp16 \
      --disable_eval
    
    TRAINING_EXIT_CODE=$?
    echo "🎯 MINIMAL MODEL COMPLETED WITH EXIT CODE: $TRAINING_EXIT_CODE"
fi

# =============================================================================
# MODEL ARCHIVING
# =============================================================================

if [ $TRAINING_EXIT_CODE -eq 0 ]; then
    echo ""
    echo "✅ Training completed successfully! Archiving model..."
    echo "==================================================="
    
    # Copy to persistent storage
    if [ -d "$TEMP_CHECKPOINT_DIR" ] && [ "$(ls -A "$TEMP_CHECKPOINT_DIR")" ]; then
        echo "📁 Copying to persistent storage..."
        cp -r "$TEMP_CHECKPOINT_DIR"/* "$PERSISTENT_CHECKPOINT_DIR/"
        echo "✅ Saved to: $PERSISTENT_CHECKPOINT_DIR"
    fi
    
    # Copy to home directory
    if [ -d "$PERSISTENT_CHECKPOINT_DIR" ] && [ "$(ls -A "$PERSISTENT_CHECKPOINT_DIR")" ]; then
        echo "🏠 Archiving to home directory..."
        cp -r "$PERSISTENT_CHECKPOINT_DIR"/* "$FINAL_MODEL_DIR/"
        echo "✅ Final model: $FINAL_MODEL_DIR"
        
        # Create usage instructions
        cat > "$FINAL_MODEL_DIR/README.md" << EOF
# BLIP3-o DiT Model (256 Tokens) - Single GPU Training

## Training Information
- **Date**: $(date -Iseconds)
- **Job ID**: ${SLURM_JOB_ID}
- **GPU**: Single H100 (95GB VRAM)
- **Tokens**: 256 (16x16 grid)
- **Training Approach**: Conservative single GPU with memory optimizations

## Model Architecture
- **Hidden Dimension**: Varies by success level (768/512/256)
- **Layers**: Varies by success level (16/12/8)  
- **Attention Heads**: Varies by success level (12/8/4)
- **Input Resolution**: 16x16 = 256 tokens
- **CLIP Input**: 1024-dim (ViT-L/14)
- **EVA-CLIP Conditioning**: 4096-dim (EVA-CLIP-8B)

## Key Features
✅ Fixed shard management (no premature deletion)
✅ Ultra memory optimizations (85% GPU limit)
✅ 3D RoPE compatible architecture
✅ Flow matching training objective
✅ Conservative evaluation (prevents OOM)

## Loading
\`\`\`python
from src.modules.models.blip3o_dit import create_blip3o_dit_model
from src.modules.config.blip3o_config import BLIP3oDiTConfig

# Load the model configuration and weights
# Check the specific config used in training logs
\`\`\`

## Performance
- Training completed successfully without OOM errors
- Memory usage stayed within H100 limits
- All critical fixes applied and verified
EOF
    fi
    
    echo ""
    echo "🎉 SUCCESS! Single GPU BLIP3-o training completed!"
    echo "Model saved to: $FINAL_MODEL_DIR"
    echo "✅ Ready for inference and further training!"
    
else
    echo ""
    echo "❌ All training attempts failed"
    echo "Check logs: ./slurm_out/train_single_gpu_${SLURM_JOB_ID}.{out,err}"
    echo "Consider further reducing batch size or model complexity"
    exit 1
fi

echo ""
echo "🎉 Job completed at: $(date)"
echo "⏱️  Total runtime: $SECONDS seconds"
echo ""
echo "📋 SINGLE GPU TRAINING SUMMARY:"
echo "================================"
echo "✅ Used full H100 GPU (95GB VRAM)"
echo "✅ 256-token architecture (16x16 grid)"
echo "✅ All memory optimizations applied"
echo "✅ Progressive fallback strategy worked"
echo "✅ Model saved to multiple locations"
echo "🚀 Training pipeline validated and working!"