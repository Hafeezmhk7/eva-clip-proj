#!/bin/bash
#SBATCH --partition=gpu_h100
#SBATCH --gpus=1
#SBATCH --job-name=blip3o_dit_training
#SBATCH --time=24:00:00
#SBATCH --output=./slurm_out/train_%j.out
#SBATCH --error=./slurm_out/train_%j.err
#SBATCH --mem=64GB
#SBATCH --cpus-per-task=8
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1

echo "🚀 Starting BLIP3-o DiT Training Job - SCRATCH-SHARED VERSION"
echo "==========================================================="
echo "Job ID: $SLURM_JOB_ID"
echo "Node: $SLURMD_NODENAME" 
echo "Date: $(date)"
echo "Working directory: $(pwd)"
echo "User: scur2711"
echo "CUDA Visible Devices: $CUDA_VISIBLE_DEVICES"

# =============================================================================
# SCRATCH-SHARED SETUP FOR scur2711 (FIXED)
# =============================================================================

# Set up scratch workspace (8TB available, 14-day retention)
SCRATCH_WORKSPACE="/scratch-shared/scur2711/blip3o_training_$SLURM_JOB_ID"
HOME_FINAL_MODEL="$HOME/models_archive/blip3o_$(date +%Y%m%d_%H%M%S)"

echo ""
echo "📁 STORAGE SETUP (FIXED):"
echo "   Scratch workspace: $SCRATCH_WORKSPACE"
echo "   Final model archive: $HOME_FINAL_MODEL"
echo "   ⚠️  All training files will use scratch-shared (8TB)"
echo "   ⚠️  Final model will be auto-saved to home directory"
echo "   ⚠️  Scratch files auto-deleted after 14 days"

# Create directories
mkdir -p "$SCRATCH_WORKSPACE"
mkdir -p "$HOME/models_archive"
mkdir -p "$HOME_FINAL_MODEL"
mkdir -p slurm_out

# Check scratch space
echo ""
echo "💾 SCRATCH-SHARED SPACE:"
df -h "/scratch-shared/scur2711" | tail -1 | awk '{printf "   Total: %s, Used: %s, Available: %s\n", $2, $3, $4}'

# Redirect ALL cache and temporary files to scratch
export WANDB_DIR="$SCRATCH_WORKSPACE/wandb_logs"
export TORCH_HOME="$SCRATCH_WORKSPACE/torch_cache"
export HF_HOME="$SCRATCH_WORKSPACE/huggingface_cache"
export TRANSFORMERS_CACHE="$SCRATCH_WORKSPACE/transformers_cache"
export TMPDIR="$SCRATCH_WORKSPACE/tmp"

# Create cache directories
mkdir -p "$WANDB_DIR" "$TORCH_HOME" "$HF_HOME" "$TRANSFORMERS_CACHE" "$TMPDIR"

echo "   All caches redirected to scratch-shared ✅"

# =============================================================================
# AUTO-SAVE FUNCTION (FIXED)
# =============================================================================

save_final_model() {
    echo ""
    echo "💾 AUTO-SAVING MODEL TO PERSISTENT STORAGE..."
    echo "============================================="
    
    if [ -d "$SCRATCH_WORKSPACE/production_checkpoints" ]; then
        echo "📦 Copying model from scratch to home directory..."
        cp -r "$SCRATCH_WORKSPACE/production_checkpoints"/* "$HOME_FINAL_MODEL/" 2>/dev/null || true
        
        # Create model loading script
        cat > "$HOME_FINAL_MODEL/load_model.py" << 'EOF'
#!/usr/bin/env python3
"""Quick script to load this BLIP3-o model"""
import sys
from pathlib import Path

# Add src to path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root / "src"))

from src.modules.models.blip3o_dit import load_blip3o_dit_model

def load_model():
    model_path = Path(__file__).parent
    print(f"Loading BLIP3-o model from: {model_path}")
    
    model = load_blip3o_dit_model(str(model_path))
    print("✅ BLIP3-o model loaded successfully!")
    print(f"   Parameters: {model.get_num_parameters():,}")
    print(f"   Memory: {model.get_memory_footprint()}")
    return model

if __name__ == "__main__":
    model = load_model()
EOF
        
        # Create training summary
        cat > "$HOME_FINAL_MODEL/training_info.txt" << EOF
BLIP3-o DiT Training Summary for scur2711
========================================
Job ID: $SLURM_JOB_ID
Node: $SLURMD_NODENAME
Training Date: $(date)
Scratch Workspace: $SCRATCH_WORKSPACE
Final Model Location: $HOME_FINAL_MODEL

IMPORTANT NOTES:
- Training files in scratch-shared will be auto-deleted after 14 days
- This final model is permanently saved in your home directory
- Scratch workspace expires on: $(date -d '+14 days' '+%Y-%m-%d')

TO LOAD THIS MODEL:
cd $(pwd)
python $HOME_FINAL_MODEL/load_model.py

OR in your code:
from src.modules.models.blip3o_dit import load_blip3o_dit_model
model = load_blip3o_dit_model('$HOME_FINAL_MODEL')
EOF
        
        chmod +x "$HOME_FINAL_MODEL/load_model.py"
        
        echo "✅ Model successfully archived!"
        echo "   Location: $HOME_FINAL_MODEL"
        echo "   Size: $(du -sh "$HOME_FINAL_MODEL" | cut -f1)"
        
    else
        echo "⚠️  No model checkpoints found in scratch workspace"
        echo "   Expected location: $SCRATCH_WORKSPACE/production_checkpoints"
    fi
}

# Set up automatic model saving on job completion
trap save_final_model EXIT

# =============================================================================
# ENVIRONMENT SETUP
# =============================================================================

# Load modules
module purge
module load 2024
module load Miniconda3/24.7.1-0
module load CUDA/12.6.0

# Activate conda environment
source activate eva_clip_env

# =============================================================================
# DATA VALIDATION
# =============================================================================

# Check if embeddings file exists
EMBEDDINGS_FILE="embeddings/blip3o_grid_embeddings.pkl"

echo ""
echo "🔍 Checking for embeddings file..."
if [ ! -f "$EMBEDDINGS_FILE" ]; then
    echo "❌ Embeddings file not found: $EMBEDDINGS_FILE"
    echo ""
    echo "Please extract embeddings first:"
    echo "  sbatch job_scripts/extract_emb.job"
    echo ""
    echo "Or run extraction manually:"
    echo "  python src/modules/extract_embeddings_g.py"
    exit 1
fi

echo "✅ Found embeddings file: $EMBEDDINGS_FILE"
echo "📊 File size: $(du -sh $EMBEDDINGS_FILE | cut -f1)"

# Validate embeddings format
echo "🧪 Validating embeddings format..."
python -c "
import pickle
import sys

try:
    with open('$EMBEDDINGS_FILE', 'rb') as f:
        data = pickle.load(f)
    
    # Check required keys for BLIP3-o
    required_keys = ['clip_blip3o_embeddings', 'eva_blip3o_embeddings']
    for key in required_keys:
        if key not in data:
            print(f'❌ Missing required key: {key}')
            sys.exit(1)
    
    # Check dimensions
    clip_shape = data['clip_blip3o_embeddings'].shape
    eva_shape = data['eva_blip3o_embeddings'].shape
    
    print(f'📐 CLIP BLIP3-o embeddings: {clip_shape}')
    print(f'📐 EVA BLIP3-o embeddings: {eva_shape}')
    
    # Validate shapes for BLIP3-o DiT
    if len(clip_shape) != 3 or clip_shape[1] != 64 or clip_shape[2] != 1024:
        print(f'❌ Invalid CLIP shape: {clip_shape}, expected [N, 64, 1024]')
        sys.exit(1)
        
    if len(eva_shape) != 3 or eva_shape[1] != 64 or eva_shape[2] != 4096:
        print(f'❌ Invalid EVA shape: {eva_shape}, expected [N, 64, 4096]')
        sys.exit(1)
    
    total_samples = data.get('total_samples', clip_shape[0])
    print(f'✅ Embeddings validation passed!')
    print(f'   Total samples: {total_samples}')
    print(f'   CLIP: ViT-L/14 features (1024-dim)')
    print(f'   EVA: EVA-CLIP-8B features (4096-dim)')
    
except Exception as e:
    print(f'❌ Embeddings validation failed: {e}')
    sys.exit(1)
"

if [ $? -ne 0 ]; then
    echo "❌ Embeddings validation failed!"
    exit 1
fi

echo "✅ Embeddings validation passed!"

# =============================================================================
# SYSTEM INFO
# =============================================================================

# Show system information
echo ""
echo "💾 System Information:"
echo "   GPU: $(nvidia-smi --query-gpu=name --format=csv,noheader,nounits)"
echo "   GPU Memory: $(nvidia-smi --query-gpu=memory.total --format=csv,noheader,nounits) MB"
echo "   CPU Cores: $SLURM_CPUS_PER_TASK"
echo "   System Memory: $SLURM_MEM_PER_NODE MB"
echo "   Scratch Available: $(df -h "$SCRATCH_WORKSPACE" | tail -1 | awk '{print $4}')"
echo "   Home Available: $(df -h "$HOME" | tail -1 | awk '{print $4}')"

# =============================================================================
# START TRAINING (FIXED TO USE SCRATCH)
# =============================================================================

echo ""
echo "🚀 Starting BLIP3-o DiT Training in Scratch-Shared..."
echo "===================================================="

# CRITICAL FIX: Use scratch workspace for --output_dir
python train_blip3o_dit.py \
  --embeddings_path "$EMBEDDINGS_FILE" \
  --output_dir "$SCRATCH_WORKSPACE/production_checkpoints" \
  --batch_size 128 \
  --num_epochs 3 \
  --device cuda \
  --fp16 \
  --compile_model \
  --gradient_checkpointing \
  --learning_rate 5e-5 \
  --warmup_steps 20 \
  --logging_steps 1 \
  --save_steps 30 \
  --eval_steps 10 \
  --wandb_project "blip3o-dit-scur2711" \
  --wandb_run_name "scratch-$(date +%Y%m%d-%H%M%S)"

# Check training exit code
TRAINING_EXIT_CODE=$?

echo ""
echo "🎯 TRAINING COMPLETED WITH EXIT CODE: $TRAINING_EXIT_CODE"

# =============================================================================
# RESULTS SUMMARY
# =============================================================================

if [ $TRAINING_EXIT_CODE -eq 0 ]; then
    echo ""
    echo "✅ BLIP3-o DiT training completed successfully!"
    echo ""
    echo "📁 Training outputs in scratch:"
    ls -lh "$SCRATCH_WORKSPACE/production_checkpoints/" 2>/dev/null || echo "   No checkpoints found"
    echo ""
    echo "📁 Final model archive (persistent):"
    ls -lh "$HOME_FINAL_MODEL/" 2>/dev/null || echo "   Archive will be created during cleanup"
    
    # Show final model info
    if [ -d "$SCRATCH_WORKSPACE/production_checkpoints" ]; then
        echo ""
        echo "🎉 Training completed successfully!"
        echo "📊 Scratch location: $SCRATCH_WORKSPACE/production_checkpoints/"
        echo "📊 Permanent location: $HOME_FINAL_MODEL/"
        
        # Check for pytorch_model.bin or model weights
        if [ -f "$SCRATCH_WORKSPACE/production_checkpoints/pytorch_model.bin" ]; then
            echo "✅ Model weights saved: pytorch_model.bin"
            echo "📊 Model size: $(du -sh "$SCRATCH_WORKSPACE/production_checkpoints/pytorch_model.bin" | cut -f1)"
        fi
        
        # Check for config files
        if [ -f "$SCRATCH_WORKSPACE/production_checkpoints/config.json" ]; then
            echo "✅ Model config saved: config.json"
        fi
        
        echo ""
        echo "🚀 Next steps:"
        echo "1. Final model will be automatically saved to: $HOME_FINAL_MODEL"
        echo "2. Load model: python $HOME_FINAL_MODEL/load_model.py"
        echo "3. Scratch files available until: $(date -d '+14 days' '+%Y-%m-%d')"
        
    fi
    
else
    echo "❌ BLIP3-o DiT training failed with exit code: $TRAINING_EXIT_CODE"
    
    echo ""
    echo "🔍 Debugging information:"
    
    # Check GPU memory
    echo "GPU Memory Status:"
    nvidia-smi
    
    # Check if any checkpoints were saved
    if [ -d "$SCRATCH_WORKSPACE/production_checkpoints" ] && [ "$(ls -A "$SCRATCH_WORKSPACE/production_checkpoints")" ]; then
        echo ""
        echo "📁 Partial training outputs found in scratch:"
        ls -lh "$SCRATCH_WORKSPACE/production_checkpoints/"
        echo "   You may be able to resume training from these checkpoints"
    fi
    
    exit 1
fi

# Show final system status
echo ""
echo "📊 Final System Status:"
echo "   GPU Memory:"
nvidia-smi --query-gpu=memory.used,memory.total --format=csv,noheader,nounits
echo "   Scratch Usage:"
du -sh "$SCRATCH_WORKSPACE" 2>/dev/null | cut -f1
echo "   Home Directory:"
df -h "$HOME" | tail -1 | awk '{print "   Available: " $4 " (Used: " $5 ")"}'

echo ""
echo "🎉 BLIP3-o DiT Job completed at: $(date)"
echo "⏱️ Total runtime: $SECONDS seconds"

# Final success message
if [ $TRAINING_EXIT_CODE -eq 0 ]; then
    echo ""
    echo "🎯 SUCCESS SUMMARY:"
    echo "✅ Embeddings: BLIP3-o compatible format (CLIP: 1024-dim, EVA: 4096-dim)"
    echo "✅ Architecture: BLIP3-o DiT with proper 3D RoPE and flow matching"
    echo "✅ Training: Completed successfully with flow matching loss"
    echo "✅ Model: Training files in scratch-shared, final model auto-archived"
    echo "✅ Storage: No disk quota issues!"
    echo ""
    echo "📁 IMPORTANT LOCATIONS:"
    echo "   Scratch workspace: $SCRATCH_WORKSPACE (available ~14 days)"
    echo "   Final model: $HOME_FINAL_MODEL (permanent)"
    echo ""
    echo "🔄 TO LOAD YOUR MODEL:"
    echo "   python $HOME_FINAL_MODEL/load_model.py"
    echo ""
    echo "Your BLIP3-o model is ready for inference! 🚀"
fi