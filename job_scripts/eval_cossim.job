#!/bin/bash
#SBATCH --job-name=blip3o_cosine_eval
#SBATCH --partition=gpu_h100
#SBATCH --nodes=1
#SBATCH --gpus=1
#SBATCH --cpus-per-gpu=18
#SBATCH --time=3:00:00
#SBATCH --mem=0
#SBATCH --output=./slurm_out/blip3o_cosine_%j.out
#SBATCH --error=./slurm_out/blip3o_cosine_%j.err

# =============================================================================
# BLIP3-o Patch-Level Cosine Similarity Evaluation Job (COSINE ONLY)
# Evaluates patch-level cosine similarity between predicted and ground truth CLIP patches
# SIMPLIFIED: Only cosine similarity, images only, no spatial patterns or quality distributions
# =============================================================================

echo "🔍 BLIP3-o Patch-Level Cosine Similarity Evaluation (COSINE ONLY)"
echo "================================================================="

# Setup environment
module purge
module load 2024
module load Miniconda3/24.7.1-0
module load CUDA/12.6.0

source activate eva_clip_env

# Configuration for your trained model
COCO_ROOT="./data/coco"
BLIP3O_MODEL_PATH="./checkpoints/blip3o_patch_pure_13259292_20250723_063221"
NUM_SAMPLES=1000
DEVICE="cuda"
NUM_INFERENCE_STEPS=50
OUTPUT_DIR="./cosine_similarity_results_$(date +%Y%m%d_%H%M%S)"

# Setup temp directories for model cache
export USER=$(whoami)
export JOB_ID=${SLURM_JOB_ID}
export JOB_TEMP="/scratch-local/${USER}.${JOB_ID}/blip3o_cosine"

export TORCH_HOME="${JOB_TEMP}/torch"
export HF_HOME="${JOB_TEMP}/huggingface"
export TRANSFORMERS_CACHE="${JOB_TEMP}/transformers"

mkdir -p "${TORCH_HOME}" "${HF_HOME}" "${TRANSFORMERS_CACHE}"
mkdir -p ./slurm_out ./results "${OUTPUT_DIR}"

echo "Cosine Similarity Evaluation Configuration:"
echo "  COCO Root: $COCO_ROOT"
echo "  BLIP3-o Model: $BLIP3O_MODEL_PATH"
echo "  Model Type: Enhanced Patch-Level DiT"
echo "  Samples: $NUM_SAMPLES"
echo "  Inference steps: $NUM_INFERENCE_STEPS"
echo "  Device: $DEVICE"
echo "  Output Dir: $OUTPUT_DIR"
echo "  Metric: COSINE SIMILARITY ONLY"
echo "  Input: IMAGES ONLY (no text in similarity computation)"
echo "  Job ID: $JOB_ID"
echo "  Node: $SLURMD_NODENAME"

# Verify paths exist
echo ""
echo "🔍 Verifying paths..."
echo "==================="

if [ ! -d "$COCO_ROOT" ]; then
    echo "❌ ERROR: COCO data not found at $COCO_ROOT"
    exit 1
fi

if [ ! -f "$COCO_ROOT/annotations/captions_val2017.json" ]; then
    echo "❌ ERROR: COCO annotations not found"
    exit 1
fi

if [ ! -d "$COCO_ROOT/images/val2017" ]; then
    echo "❌ ERROR: COCO images not found"
    exit 1
fi

if [ ! -d "$BLIP3O_MODEL_PATH" ]; then
    echo "❌ ERROR: BLIP3-o model not found at $BLIP3O_MODEL_PATH"
    echo "   Available checkpoints:"
    ls -la ./checkpoints/ 2>/dev/null || echo "   No checkpoints found"
    exit 1
fi

# Check for model files
ENHANCED_CONFIG_FILE=""
if [ -f "$BLIP3O_MODEL_PATH/enhanced_training_config.json" ]; then
    ENHANCED_CONFIG_FILE="enhanced_training_config.json"
    echo "✅ Enhanced training config found"
elif [ -f "$BLIP3O_MODEL_PATH/config.json" ]; then
    ENHANCED_CONFIG_FILE="config.json"
    echo "✅ Standard config found"
elif [ -f "$BLIP3O_MODEL_PATH/blip3o_model_config.json" ]; then
    ENHANCED_CONFIG_FILE="blip3o_model_config.json"
    echo "✅ BLIP3-o config found"
else
    echo "❌ ERROR: No config file found in BLIP3-o model directory"
    echo "   Model directory contents:"
    ls -la "$BLIP3O_MODEL_PATH"
    exit 1
fi

# Check for model weights
WEIGHT_FILE=""
if [ -f "$BLIP3O_MODEL_PATH/pytorch_model.bin" ]; then
    WEIGHT_FILE="pytorch_model.bin"
    echo "✅ PyTorch weights found"
elif [ -f "$BLIP3O_MODEL_PATH/model.safetensors" ]; then
    WEIGHT_FILE="model.safetensors"
    echo "✅ SafeTensors weights found"
elif [ -f "$BLIP3O_MODEL_PATH/pytorch_model.safetensors" ]; then
    WEIGHT_FILE="pytorch_model.safetensors"
    echo "✅ PyTorch SafeTensors weights found"
else
    echo "❌ ERROR: No model weights found in BLIP3-o model directory"
    echo "   Model directory contents:"
    ls -la "$BLIP3O_MODEL_PATH"
    exit 1
fi

echo "✅ COCO data verified"
echo "✅ BLIP3-o model verified"

# Show model info
echo ""
echo "📊 Model Information:"
echo "===================="
echo "Model path: $BLIP3O_MODEL_PATH"
echo "Config file: $ENHANCED_CONFIG_FILE"
echo "Weight file: $WEIGHT_FILE"

# Verify evaluation script exists
EVAL_SCRIPT="eval_blip3o_patch_similarity.py"
if [ ! -f "$EVAL_SCRIPT" ]; then
    echo "❌ ERROR: Evaluation script not found: $EVAL_SCRIPT"
    echo "   Make sure the script is in the current directory"
    exit 1
fi

echo "✅ Evaluation script verified: $EVAL_SCRIPT"

# Run cosine similarity evaluation
echo ""
echo "🚀 Starting BLIP3-o Cosine Similarity Evaluation..."
echo "=================================================="
echo "This will evaluate:"
echo "  1. 🎯 Patch-level cosine similarity (256 patches per image)"
echo "  2. 📊 Per-image average cosine similarity"
echo "  3. 🌐 Global average cosine similarity (all patches)"
echo ""
echo "SIMPLIFIED EVALUATION:"
echo "  • Metric: COSINE SIMILARITY ONLY"
echo "  • Input: IMAGES ONLY (no text in similarity computation)"
echo "  • Output: Three main similarity measurements"
echo ""
echo "Expected metrics:"
echo "  • Individual patch similarities: [N, 256] cosine similarities"
echo "  • Per-image averages: Mean of 256 patches per image"
echo "  • Global average: Mean of ALL patches across dataset"
echo ""

EVAL_START_TIME=$(date +%s)

# Run the simplified cosine similarity evaluation script
python eval_blip3o_patch_similarity.py \
    --coco_root "$COCO_ROOT" \
    --model_path "$BLIP3O_MODEL_PATH" \
    --num_samples $NUM_SAMPLES \
    --device $DEVICE \
    --num_inference_steps $NUM_INFERENCE_STEPS \
    --output_dir "$OUTPUT_DIR"

EXIT_CODE=$?
EVAL_END_TIME=$(date +%s)
EVAL_DURATION=$((EVAL_END_TIME - EVAL_START_TIME))

# Results summary
echo ""
echo "========================================================================"
echo "📊 BLIP3-o COSINE SIMILARITY EVALUATION RESULTS"
echo "========================================================================"
echo "Job ID: $JOB_ID"
echo "Node: $SLURMD_NODENAME"
echo "Model: BLIP3-o Patch-Level DiT"
echo "Metric: COSINE SIMILARITY ONLY"
echo "Input: IMAGES ONLY"
echo "Evaluation Duration: $EVAL_DURATION seconds"
echo "Total Runtime: $SECONDS seconds"
echo "Date: $(date)"

if [ $EXIT_CODE -eq 0 ]; then
    echo "Status: ✅ SUCCESS - COSINE SIMILARITY EVALUATION COMPLETED"
    
    # Find and display results from JSON file
    RESULTS_FILE="$OUTPUT_DIR/patch_similarity_results.json"
    if [ -f "$RESULTS_FILE" ]; then
        echo ""
        echo "📊 COSINE SIMILARITY RESULTS SUMMARY:"
        echo "===================================="
        
        # Parse JSON results and display prominently
        if command -v python3 &> /dev/null; then
            python3 << EOF
import json
import sys

try:
    with open('$RESULTS_FILE', 'r') as f:
        data = json.load(f)
    
    if data:
        print()
        print("🎯 PATCH-LEVEL COSINE SIMILARITY RESULTS:")
        print("-" * 50)
        
        # Dataset info
        num_images = data.get('num_images', 0)
        total_patches = data.get('total_patches', 0)
        
        print(f"Dataset: {num_images:,} images, {total_patches:,} patches")
        print(f"Metric: COSINE SIMILARITY ONLY")
        print(f"Input: IMAGES ONLY")
        print()
        
        # Key similarity metrics
        global_avg = data.get('global_avg_similarity', 0)
        overall_mean = data.get('overall_mean_similarity', 0)
        per_image_mean = data.get('per_image_mean', 0)
        
        print(f"📊 THREE MAIN SIMILARITY MEASUREMENTS:")
        print(f"   1. Global Average (all patches):     {global_avg:.4f}")
        print(f"   2. Per-patch mean:                   {overall_mean:.4f}")
        print(f"   3. Per-image average mean:           {per_image_mean:.4f}")
        print()
        
        # Additional statistics
        std_sim = data.get('overall_std_similarity', 0)
        min_sim = data.get('overall_min_similarity', 0)
        max_sim = data.get('overall_max_similarity', 0)
        median_sim = data.get('overall_median_similarity', 0)
        
        print(f"📈 ADDITIONAL STATISTICS:")
        print(f"   Standard deviation:                  {std_sim:.4f}")
        print(f"   Minimum similarity:                  {min_sim:.4f}")
        print(f"   Maximum similarity:                  {max_sim:.4f}")
        print(f"   Median similarity:                   {median_sim:.4f}")
        print()
        
        # Performance assessment
        if global_avg > 0.8:
            print(f"🎉 OUTSTANDING: Excellent patch-level cosine similarity!")
            print(f"🚀 Model generates high-quality CLIP-aligned patches")
        elif global_avg > 0.6:
            print(f"✅ EXCELLENT: Strong patch-level cosine similarity")
            print(f"🎯 Model successfully learned patch-level mapping")
        elif global_avg > 0.4:
            print(f"🔄 GOOD: Moderate patch-level cosine similarity")
            print(f"💡 Model shows promise but can be improved")
        else:
            print(f"⚠️  NEEDS IMPROVEMENT: Low patch-level cosine similarity")
            print(f"💡 Consider training adjustments")
        
        print()
        print(f"💾 Results saved to: $OUTPUT_DIR")
        print(f"📋 Main results: patch_similarity_results.json")
        print(f"🖼️  Per-image details: per_image_details_cosine.json")
        
    else:
        print(f"❌ Could not find similarity results in JSON file")

except Exception as e:
    print(f"❌ Could not parse similarity results file: {e}")
    sys.exit(1)
EOF
        else
            echo "⚠️  Python not available to parse results"
            echo "   Results file: $RESULTS_FILE"
        fi
    else
        echo "⚠️  No results file found"
        echo "   Evaluation may have completed without saving results"
        echo "   Check the output above for inline results"
    fi
    
    # Show output directory contents
    echo ""
    echo "📁 Output Directory Contents:"
    echo "============================"
    ls -la "$OUTPUT_DIR"
    
    echo ""
    echo "✅ BLIP3-o COSINE SIMILARITY EVALUATION COMPLETED SUCCESSFULLY"
    
else
    echo "Status: ❌ FAILED"
    echo ""
    echo "❌ BLIP3-o COSINE SIMILARITY EVALUATION FAILED WITH EXIT CODE: $EXIT_CODE"
    echo ""
    echo "🔍 Troubleshooting:"
    echo "   1. Check if COCO data exists and is accessible"
    echo "   2. Verify BLIP3-o model path and files"
    echo "   3. Ensure GPU memory is sufficient"
    echo "   4. Check Python environment and dependencies"
    echo "   5. Verify model compatibility"
    echo "   6. Look for error messages in the output above"
    echo ""
    echo "📂 Log files:"
    echo "   Output: ./slurm_out/blip3o_cosine_${JOB_ID}.out"
    echo "   Error:  ./slurm_out/blip3o_cosine_${JOB_ID}.err"
    echo ""
    echo "🔧 Quick checks:"
    echo "   • COCO path: $COCO_ROOT"
    echo "   • BLIP3-o model: $BLIP3O_MODEL_PATH"
    echo "   • Available space: $(df -h . | tail -1 | awk '{print $4}')"
    echo "   • Config: $ENHANCED_CONFIG_FILE"
    echo "   • Weight file: $WEIGHT_FILE"
fi

echo ""
echo "========================================================================"
echo "🏁 COSINE SIMILARITY EVALUATION SUMMARY"
echo "========================================================================"

# Always show final status prominently
if [ $EXIT_CODE -eq 0 ]; then
    echo "🎉 SUCCESS: Check the cosine similarity results above!"
    echo ""
    echo "📋 What was evaluated:"
    echo "   ✅ Patch-level cosine similarity (256 patches per image)"
    echo "   ✅ Per-image average cosine similarity"
    echo "   ✅ Global average cosine similarity (all patches)"
    echo ""
    echo "🎯 Key Metrics Computed:"
    echo "   • Individual patch similarities (256 per image)"
    echo "   • Per-image averages (mean of 256 patches)"
    echo "   • Global average (mean of ALL patches across dataset)"
    echo ""
    echo "📊 Next Steps:"
    echo "   • Review the three main similarity metrics above"
    echo "   • Use global average as primary evaluation metric"
    echo "   • Compare with baseline metrics if available"
    echo "   • Check per-image details for analysis"
else
    echo "❌ FAILURE: Check error messages above and in log files"
    echo ""
    echo "💡 Troubleshooting:"
    echo "   • BLIP3-o model path incorrect or files missing"
    echo "   • Insufficient GPU memory for model"
    echo "   • Missing dependencies or environment issues"
    echo "   • Model compatibility problems"
    echo "   • COCO dataset path or permissions problems"
fi

echo "========================================================================"

# Cleanup temp cache
if [ -d "${JOB_TEMP}" ]; then
    echo "🧹 Cleaning up temporary cache..."
    rm -rf "${JOB_TEMP}"
fi

echo "🏁 Cosine similarity evaluation job completed at $(date)"

exit $EXIT_CODE